rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Only the user can read/write their own document
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Properties: Landlords can CRUD their own, all authenticated users can read
    match /properties/{propertyId} {
      allow read: if request.auth != null;
      allow write, update, delete: if request.auth != null && (
        request.auth.uid == resource.data.landlordId ||
        request.auth.token.email == resource.data.landlordId
      );
      allow create: if request.auth != null && (
        request.auth.uid == request.resource.data.landlordId ||
        request.auth.token.email == request.resource.data.landlordId
      );
    }

    // Leases: Landlords and renters can read their own leases
    match /leases/{leaseId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.landlordId ||
        request.auth.token.email == resource.data.landlordId ||
        request.auth.uid == resource.data.renterId ||
        request.auth.token.email == resource.data.renterId
      );
      allow write, update, delete: if request.auth != null && (
        request.auth.uid == resource.data.landlordId ||
        request.auth.token.email == resource.data.landlordId ||
        request.auth.uid == resource.data.renterId ||
        request.auth.token.email == resource.data.renterId
      );
      allow create: if request.auth != null && (
        request.auth.uid == request.resource.data.landlordId ||
        request.auth.token.email == request.resource.data.landlordId
      );
      // Renters can only update signatureStatus.renterSigned and signatureStatus.renterSignedAt
      allow update: if request.auth != null &&
        (resource.data.renterId == request.auth.token.email || resource.data.renterId == request.auth.uid) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['signatureStatus']);
    }

    // PAYMENTS: Landlord and renter can read/create/update/delete their own
    match /payments/{paymentId} {
      allow read: if request.auth != null && (
        (resource.data.landlordId != null && (request.auth.uid == resource.data.landlordId || request.auth.token.email == resource.data.landlordId)) ||
        (resource.data.renterId != null && (request.auth.uid == resource.data.renterId || request.auth.token.email == resource.data.renterId)) ||
        (resource.data.renterEmail != null && (request.auth.uid == resource.data.renterEmail || request.auth.token.email == resource.data.renterEmail))
      );
      allow create: if request.auth != null && (
        (request.resource.data.landlordId != null && (request.auth.uid == request.resource.data.landlordId || request.auth.token.email == request.resource.data.landlordId)) ||
        (request.resource.data.renterId != null && (request.auth.uid == request.resource.data.renterId || request.auth.token.email == request.resource.data.renterId)) ||
        (request.resource.data.renterEmail != null && (request.auth.uid == request.resource.data.renterEmail || request.auth.token.email == request.resource.data.renterEmail))
      );
      allow update, delete: if request.auth != null && (
        (resource.data.landlordId != null && (request.auth.uid == resource.data.landlordId || request.auth.token.email == resource.data.landlordId)) ||
        (resource.data.renterId != null && (request.auth.uid == resource.data.renterId || request.auth.token.email == resource.data.renterId)) ||
        (resource.data.renterEmail != null && (request.auth.uid == resource.data.renterEmail || request.auth.token.email == resource.data.renterEmail))
      );
    }

    // SECURITY DEPOSITS: Landlord and renter can read, landlord can create/update/delete
    match /securityDeposits/{depositId} {
      allow read: if request.auth != null && (
        (resource.data.landlordId != null && (request.auth.uid == resource.data.landlordId || request.auth.token.email == resource.data.landlordId)) ||
        (resource.data.renterId != null && (request.auth.uid == resource.data.renterId || request.auth.token.email == resource.data.renterId)) ||
        (resource.data.renterEmail != null && (request.auth.uid == resource.data.renterEmail || request.auth.token.email == resource.data.renterEmail))
      );
      allow create: if request.auth != null && (
        request.resource.data.landlordId != null && (request.auth.uid == request.resource.data.landlordId || request.auth.token.email == request.resource.data.landlordId)
      );
      allow update, delete: if request.auth != null && (
        resource.data.landlordId != null && (request.auth.uid == resource.data.landlordId || request.auth.token.email == resource.data.landlordId)
      );
    }

    // NOTICES: Landlord and renter can read, landlord can write, renter can only update 'readAt'
    match /notices/{noticeId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.landlordId ||
        request.auth.token.email == resource.data.landlordId ||
        resource.data.renterId == request.auth.token.email ||
        resource.data.renterId == request.auth.uid ||
        resource.data.renterEmail == request.auth.token.email ||
        resource.data.renterEmail == request.auth.uid
      );
      allow write, update, delete: if request.auth != null && (
        request.auth.uid == resource.data.landlordId ||
        request.auth.token.email == resource.data.landlordId
      );
      allow create: if request.auth != null && (
        request.auth.uid == request.resource.data.landlordId ||
        request.auth.token.email == request.resource.data.landlordId
      );
      // Renters can only update 'readAt' field
      allow update: if request.auth != null &&
        ((resource.data.renterId == request.auth.token.email || resource.data.renterId == request.auth.uid ||
          resource.data.renterEmail == request.auth.token.email || resource.data.renterEmail == request.auth.uid) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readAt']));
    }

    // INVITATIONS: Landlord and invited renter can read, landlord can create/delete, renter can update status/respond
    match /invitations/{invitationId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.landlordId ||
        request.auth.token.email == resource.data.landlordId ||
        resource.data.renterEmail == request.auth.token.email ||
        resource.data.renterEmail == request.auth.uid
      );
      allow create, delete: if request.auth != null && (
        request.auth.uid == request.resource.data.landlordId ||
        request.auth.token.email == request.resource.data.landlordId
      );
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.landlordId ||
        request.auth.token.email == resource.data.landlordId ||
        (resource.data.renterEmail == request.auth.token.email || resource.data.renterEmail == request.auth.uid) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'respondedAt', 'updatedAt'])
      );
    }

    // Applications: Landlords can read, renters can CRUD their own
    match /applications/{applicationId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.landlordId ||
        request.auth.token.email == resource.data.landlordId ||
        request.auth.uid == resource.data.renterId ||
        request.auth.token.email == resource.data.renterId
      );
      allow create: if request.auth != null && (
        request.auth.uid == request.resource.data.renterId ||
        request.auth.token.email == request.resource.data.renterId ||
        request.resource.data.renterEmail == request.auth.token.email ||
        request.resource.data.renterEmail == request.auth.uid
      );
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.landlordId ||
        request.auth.token.email == resource.data.landlordId ||
        request.auth.uid == resource.data.renterId ||
        request.auth.token.email == resource.data.renterId
      );
    }

    // Landlord Profiles: Only the landlord can CRUD their profile, but allow all authenticated users to read
    match /landlordProfiles/{profileId} {
      allow read: if request.auth != null;
      allow write, update, delete: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        request.auth.token.email == resource.data.userId
      );
      allow create: if request.auth != null && (
        request.auth.uid == request.resource.data.userId ||
        request.auth.token.email == request.resource.data.userId
      );
    }

    // Renter Profiles: Only the renter can CRUD their profile
    match /renterProfiles/{profileId} {
      allow read, write, update, delete: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        request.auth.token.email == resource.data.userId
      );
      allow create: if request.auth != null && (
        request.auth.uid == request.resource.data.userId ||
        request.auth.token.email == request.resource.data.userId
      );
    }

    // Admin: Full access for admin users
    match /{document=**} {
      allow read, write: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}